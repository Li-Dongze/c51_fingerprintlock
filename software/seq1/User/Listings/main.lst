C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\004-Programming\02-Embedded\Keil5\C51\BIN\C51.EXE main.c COMPACT OPTIMIZE(8,SPEED) BROWSE MODP2 
                    -INCDIR(..\Dev;..\Sys;..\User;..\Dev\menu;..\Dev\mg200) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\ma
                    -in.obj)

line level    source

   1          #include <STC89C5xRC.H>
   2          #include "config.h"
   3          #include "bmp.h" 
   4          
   5          /*****************************************任务函数声明***********************************************/
   6          
   7          //任务调度机制
   8          void Task_Init(void);
   9          void TaskRun(void);
  10          
  11          //具体任务函数
  12          void Led_Task(void);
  13          void key_Task(void);
  14          void Oled_Task(void);
  15          
  16          //其他函数
  17          void oledshow_MainPage(void);
  18          void oledshow_MasterPage(void);
  19          void password_clear(void);
  20          bit str_judge(int *str1, int *str2);
  21          void str_copy(int *str1, int *str2);
  22          
  23          /*****************************************外设全局变量***********************************************/
  24          
  25          //led专用变量
  26          uint8_t ucled;
  27          
  28          //按键专用变量
  29          uint8_t Key_Value;
  30          uint8_t Key_Down;
  31          uint8_t Key_Old;
  32          
  33          //任务调度专用变量
  34          uint16_t data TaskTimer[TASKNUM_MAX];
  35          TaskStruct data Task[] = {
  36              //{Led_Task, 100},
  37                  {key_Task, 10},
  38                  {Oled_Task, 1000}
  39          };
  40          /*****************************************用户全局变量***********************************************/
  41          char str[20];
  42          //uint8_t eepromBuf[10];
  43          int count = 0;
  44          volatile char password[4] = "____";
  45          volatile char user_password[4] = "1234";
  46          volatile char master_password[4] = "4321";
  47          
  48          uint8_t index = 0;
  49          bit door_flag = 0;
  50          bit Mode = 0;
  51          bit master_enter_flag = 0;
  52          bit change_flag = 0;
  53          bit page_flag = 0;
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 2   

  54          bit main_enter_flag = 0;
  55          
  56          //uint8_t menuKey_flag;
  57          
  58          /****************************************************************************************************/
  59          
  60          
  61          /*------------------------------------------主函数--------------------------------------------------*/
  62          int main(void)
  63          {
  64   1              Task_Init();
  65   1          
  66   1          //delay_ms(1000);
  67   1          
  68   1              OLED_Init();//初始化OLED
  69   1              OLED_ColorTurn(0);//0正常显示，1 反色显示
  70   1          OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示
  71   1          
  72   1          oledshow_MainPage();
  73   1          
  74   1          //menu_init();
  75   1          
  76   1          //EEPROM_Write("hello", 0, 5);
  77   1      //    EEPROM_Write((uint8_t *)user_password, 0, 4);
  78   1      //    delay_ms(20);
  79   1      //    EEPROM_Write((uint8_t *)master_password, 8, 4);
  80   1          
  81   1          EEPROM_Read((uint8_t *)user_password, 0, 4);
  82   1          delay_ms(20);
  83   1          EEPROM_Read((uint8_t *)master_password, 8, 4);
  84   1          
  85   1              Timer0_Init();
  86   1          Uart1_Init();
  87   1              EA = 1;
  88   1          
  89   1          //sprintf(str, "hello\n");
  90   1          //UART_SendString("hello");
  91   1              
  92   1              while(1)
  93   1              {
  94   2                      TaskRun();
  95   2              }
  96   1      }
  97          
  98          void oledshow_MainPage(void)
  99          {
 100   1          sprintf(str, "user-ID");
 101   1          OLED_ShowString(0,0,str,8);
 102   1          
 103   1          sprintf(str, "Enter Password:");
 104   1          OLED_ShowString(0,2,str,8);
 105   1          
 106   1          // 清空输入密码
 107   1          password_clear();    
 108   1          sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 109   1          OLED_ShowString(0,4,str,8);
 110   1          
 111   1          // 门状态
 112   1          sprintf(str, "door close");
 113   1          OLED_ShowString(0,6,str,8);
 114   1          
 115   1      }
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 3   

 116          
 117          void oledshow_MasterPage(void)
 118          {
 119   1          sprintf(str, "change: user");
 120   1          OLED_ShowString(0,0,str,8);
 121   1          
 122   1          sprintf(str, "Change Password:");
 123   1          OLED_ShowString(0,2,str,8);
 124   1          
 125   1          // 清空输入密码
 126   1          password_clear();    
 127   1          sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 128   1          OLED_ShowString(0,4,str,8);
 129   1          
 130   1      }
 131          
 132          void password_clear(void)
 133          {
 134   1          password[0] = '_';
 135   1          password[1] = '_';
 136   1          password[2] = '_';
 137   1          password[3] = '_';
 138   1      }
 139          
 140          bit str_judge(char *str1, char *str2)
 141          {
*** WARNING C235 IN LINE 141 OF main.c: parameter 1: different types
*** WARNING C235 IN LINE 141 OF main.c: parameter 2: different types
 142   1          uint8_t i;
 143   1          
 144   1          for(i = 0; i < 4; i++)
 145   1          {
 146   2              if(str1[i] != str2[i])
 147   2                  return 0;
 148   2          }
 149   1          return 1;
 150   1      }
 151          
 152          void str_copy(char *str1, char *str2)
 153          {
*** WARNING C235 IN LINE 153 OF main.c: parameter 1: different types
*** WARNING C235 IN LINE 153 OF main.c: parameter 2: different types
 154   1          uint8_t i;
 155   1          
 156   1          for(i = 0; i < 4; i++)
 157   1          {
 158   2              str1[i] = str2[i];
 159   2          }
 160   1      }
 161          
 162          /*-----------------------------------------中断服务函数--------------------------------------------------*
             -/
 163          void Timer0_Rountine(void)      interrupt 1
 164          {
 165   1              uint8_t i;
 166   1          
 167   1          // 手动重装
 168   1          TL0 = 0x66;                         //设置定时初始值
 169   1              TH0 = 0xFC;                             //设置定时初始值
 170   1          
 171   1              //任务定时器递减
 172   1              for(i = 0; i < TASKNUM_MAX; i++)
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 4   

 173   1                      if(TaskTimer[i])
 174   1                              TaskTimer[i]--;
 175   1      }
 176          
 177          void Uart1_Isr(void) interrupt 4
 178          {
 179   1              if (RI)                         //检测串口1接收中断
 180   1              {
 181   2              
 182   2                      RI = 0;                 //清除串口1接收中断请求位
 183   2              }
 184   1          
 185   1      //    if (TI)                           //检测串口1发送中断
 186   1      //    {
 187   1      //        
 188   1      //        TI = 0;
 189   1      //    }
 190   1      }
 191          
 192          /*-----------------------------------------具体任务--------------------------------------------------*/
 193          void Led_Task(void)
 194          {
 195   1          //P0 ^= 0x01;
 196   1      }       
 197          
 198          void key_Task(void)
 199          {
 200   1              // 三行代码数字滤波
 201   1              Key_Value = Key_Read();
 202   1              Key_Down = Key_Value&(Key_Value^Key_Old);
 203   1              Key_Old = Key_Value;
 204   1              
 205   1          // 切换用户/管理员模式
 206   1          if(Key_Down == 13)
 207   1          {
 208   2              Mode ^= 1;
 209   2          }
 210   1          
 211   1          // 选择修改用户/管理员密码
 212   1          if(Key_Down == 14)
 213   1          {
 214   2              change_flag ^= 1;
 215   2          }
 216   1              
 217   1          
 218   1              switch(Key_Down)
 219   1              {
 220   2                      case 10:
 221   2                  password[index++] = '0';
 222   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 223   2                  OLED_ShowString(0,4,str,8);
 224   2              break;
 225   2              
 226   2              case 1:
 227   2                  password[index++] = '1';
 228   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 229   2                  OLED_ShowString(0,4,str,8);
 230   2              break;
 231   2              
 232   2              case 2:
 233   2                  password[index++] = '2';
 234   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 5   

 235   2                  OLED_ShowString(0,4,str,8);
 236   2              break;
 237   2              
 238   2              case 3:
 239   2                  password[index++] = '3';
 240   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 241   2                  OLED_ShowString(0,4,str,8);
 242   2                      break;
 243   2              
 244   2              case 4:
 245   2                  password[index++] = '4';
 246   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 247   2                  OLED_ShowString(0,4,str,8);
 248   2                      break;
 249   2              
 250   2              case 5:
 251   2                  password[index++] = '5';
 252   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 253   2                  OLED_ShowString(0,4,str,8);
 254   2                      break;
 255   2              
 256   2              case 6:
 257   2                  password[index++] = '6';
 258   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 259   2                  OLED_ShowString(0,4,str,8);
 260   2                      break;
 261   2              
 262   2              case 7:
 263   2                  password[index++] = '7';
 264   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 265   2                  OLED_ShowString(0,4,str,8);
 266   2                      break;
 267   2              
 268   2              case 8:
 269   2                  password[index++] = '8';
 270   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 271   2                  OLED_ShowString(0,4,str,8);
 272   2                      break;
 273   2              
 274   2              case 9:
 275   2                  password[index++] = '9';
 276   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 277   2                  OLED_ShowString(0,4,str,8);
 278   2                      break;
 279   2              
 280   2              default:
 281   2              break;
 282   2              }
 283   1          
 284   1          // 输入完毕，判断密码是否正确
 285   1          if(index > 3)
 286   1          {
 287   2              // 主界面
 288   2              if(page_flag == 0)
 289   2              {
 290   3                  // 用户模式下
 291   3                  if(Mode == 0)
 292   3                  {
 293   4                      door_flag = str_judge(password, user_password);
 294   4                      // 清空输入密码
 295   4                      password_clear();
 296   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 6   

 297   4                      OLED_ShowString(0,4,str,8);
 298   4                      
 299   4                  }
 300   3                  // 管理员模式下
 301   3                  else
 302   3                  {
 303   4                      master_enter_flag = str_judge(password, master_password);
 304   4                      // 清空输入密码
 305   4                      password_clear();
 306   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 307   4                      OLED_ShowString(0,4,str,8);
 308   4                      
 309   4                  }
 310   3              }
 311   2              // 管理员界面
 312   2              else
 313   2              {
 314   3                  // 更改用户密码
 315   3                  if(change_flag == 0)
 316   3                  {
 317   4                      str_copy(user_password, password);
 318   4                      
 319   4                      EEPROM_Write((uint8_t *)user_password, 0, 4);
 320   4                      
 321   4                      // 清空输入密码
 322   4                      password_clear();
 323   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 324   4                      OLED_ShowString(0,4,str,8);
 325   4                  }
 326   3                  // 更改管理员密码
 327   3                  else
 328   3                  {
 329   4                      str_copy(master_password, password);
 330   4                      
 331   4                      EEPROM_Write((uint8_t *)master_password, 8, 4);
 332   4                      
 333   4                      // 清空输入密码
 334   4                      password_clear();
 335   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 336   4                      OLED_ShowString(0,4,str,8);
 337   4                  }
 338   3                  main_enter_flag = 1;
 339   3              }
 340   2              
 341   2              
 342   2              
 343   2              index = 0;
 344   2          }
 345   1             
 346   1      }
 347          
 348          void Oled_Task(void)
 349          {
 350   1          // 调试代码
 351   1          sprintf(str, "%c%c%c%c-%c%c%c%c", user_password[0], user_password[1], user_password[2], user_password[
             -3],
 352   1                                            master_password[0], master_password[1], master_password[2], master_p
             -assword[3]);
 353   1          OLED_ShowString(70,7,str,8);
 354   1         
 355   1          // 主界面
 356   1          if(page_flag == 0)
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 7   

 357   1          {   
 358   2              // 是否开门
 359   2              if(door_flag)
 360   2              {
 361   3                  sprintf(str, "door open ");
 362   3                  OLED_ShowString(0,6,str,8);
 363   3                  
 364   3                  P07 = 0;
 365   3                  
 366   3                  delay_ms(1000);
 367   3                  door_flag = 0;
 368   3              }
 369   2              else
 370   2              {
 371   3                  sprintf(str, "door close");
 372   3                  OLED_ShowString(0,6,str,8);
 373   3                  
 374   3                  P07 = 1;
 375   3              }
 376   2              
 377   2              // 用户模式
 378   2              if(Mode == 0)
 379   2              {
 380   3                  sprintf(str, "user-ID  ");
 381   3                  OLED_ShowString(0,0,str,8);
 382   3              }
 383   2              // 管理员模式
 384   2              else
 385   2              {
 386   3                  sprintf(str, "master-ID");
 387   3                  OLED_ShowString(0,0,str,8);
 388   3                  
 389   3                  // 成功进入管理员界面
 390   3                  if(master_enter_flag)
 391   3                  {
 392   4                      OLED_Clear();
 393   4                      oledshow_MasterPage();
 394   4                      
 395   4                      door_flag = 0;
 396   4                      Mode = 0;
 397   4                      master_enter_flag = 0;
 398   4                      change_flag = 0;
 399   4                      page_flag = 1;
 400   4                      main_enter_flag = 0;
 401   4                  }
 402   3              }
 403   2          }
 404   1          // 管理员界面
 405   1          else
 406   1          {
 407   2              // 更改用户密码
 408   2              if(change_flag == 0)
 409   2              {
 410   3                  sprintf(str, "change: user  ");
 411   3                  OLED_ShowString(0,0,str,8);
 412   3              }
 413   2              // 更改管理员密码
 414   2              else
 415   2              {
 416   3                  sprintf(str, "change: master");
 417   3                  OLED_ShowString(0,0,str,8);
 418   3              }
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 8   

 419   2              
 420   2              // 成功返回主界面
 421   2              if(main_enter_flag)
 422   2              {
 423   3                  OLED_Clear();
 424   3                  oledshow_MainPage();
 425   3                  
 426   3                  // 退回主界面用户模式
 427   3                  door_flag = 0;
 428   3                  Mode = 0;
 429   3                  master_enter_flag = 0;
 430   3                  change_flag = 0;
 431   3                  page_flag = 0;
 432   3                  main_enter_flag = 0;
 433   3              }
 434   2          }
 435   1          
 436   1          
 437   1      }
 438          
 439          /*-----------------------------------------任务调度--------------------------------------------------*/
 440          void Task_Init(void)
 441          {
 442   1              uint8_t NTask;
 443   1              for(NTask = 0; NTask < sizeof(Task)/sizeof(Task[0]); NTask++)
 444   1              {
 445   2                      TaskTimer[NTask] = Task[NTask].TaskPeriod;
 446   2              }
 447   1      }
 448          
 449          void TaskRun(void)
 450          {
 451   1              uint8_t NTask;
 452   1              for(NTask = 0; NTask < sizeof(Task)/sizeof(Task[0]); NTask++)
 453   1              {
 454   2                      if(TaskTimer[NTask] == 0)
 455   2                      {
 456   3                              TaskTimer[NTask] = Task[NTask].TaskPeriod;
 457   3                              (Task[NTask].pTask)();
 458   3                      }
 459   2              }
 460   1      }
 461          
 462          
 463          
 464          
 465          
 466          
 467          
 468          
 469          
 470          
 471          
 472          
 473          
 474          
 475          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1659    ----
   CONSTANT SIZE    =   1188    ----
C51 COMPILER V9.54   MAIN                                                                  01/02/2025 14:15:32 PAGE 9   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     39      13
   DATA SIZE        =     18    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
