C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: E:\004-Programming\02-Embedded\Keil5\C51\BIN\C51.EXE main.c COMPACT OPTIMIZE(8,SPEED) BROWSE MODP2 
                    -INCDIR(..\Dev;..\Sys;..\User;..\Dev\menu;..\Dev\mg200) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\ma
                    -in.obj)

line level    source

   1          #include <STC89C5xRC.H>
   2          #include "config.h"
   3          #include "bmp.h" 
   4          
   5          /*****************************************任务函数声明***********************************************/
   6          
   7          //任务调度机制
   8          void Task_Init(void);
   9          void TaskRun(void);
  10          
  11          //具体任务函数
  12          void Led_Task(void);
  13          void key_Task(void);
  14          void Oled_Task(void);
  15          
  16          //其他函数
  17          void oledshow_MainPage(void);
  18          void oledshow_MasterPage(void);
  19          void door_motor(void);
  20          void password_clear(void);
  21          bit str_judge(int *str1, int *str2);
  22          void str_copy(int *str1, int *str2);
  23          
  24          /*****************************************外设全局变量***********************************************/
  25          
  26          //led专用变量
  27          uint8_t ucled;
  28          
  29          //按键专用变量
  30          uint8_t Key_Value;
  31          uint8_t Key_Down;
  32          uint8_t Key_Old;
  33          
  34          //任务调度专用变量
  35          uint16_t data TaskTimer[TASKNUM_MAX];
  36          TaskStruct data Task[] = {
  37              //{Led_Task, 1},
  38                  {key_Task, 20},
  39                  {Oled_Task, 4000}
  40          };
  41          /*****************************************用户全局变量***********************************************/
  42          char str[20];
  43          //uint8_t eepromBuf[10];
  44          int count = 0;
  45          volatile char password[4] = "____";
  46          volatile char user_password[4] = "1234";
  47          volatile char master_password[4] = "4321";
  48          
  49          uint8_t index = 0;
  50          bit door_flag = 0;
  51          bit Mode = 0;
  52          bit master_enter_flag = 0;
  53          bit change_flag = 0;
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 2   

  54          bit page_flag = 0;
  55          bit main_enter_flag = 0;
  56          
  57          // 舵机
  58          volatile uint8_t count0 = 0;
  59          volatile int locktime = 0;
  60          volatile uint8_t jiaodu = 1;
  61          
  62          //uint8_t menuKey_flag;
  63          
  64          /****************************************************************************************************/
  65          
  66          
  67          /*------------------------------------------主函数--------------------------------------------------*/
  68          int main(void)
  69          {
  70   1              Task_Init();
  71   1          
  72   1          //delay_ms(1000);
  73   1          
  74   1              OLED_Init();//初始化OLED
  75   1              OLED_ColorTurn(0);//0正常显示，1 反色显示
  76   1          OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示
  77   1          
  78   1          oledshow_MainPage();
  79   1          
  80   1          //menu_init();
  81   1          
  82   1          //EEPROM_Write("hello", 0, 5);
  83   1      //    EEPROM_Write((uint8_t *)user_password, 0, 4);
  84   1      //    delay_ms(20);
  85   1      //    EEPROM_Write((uint8_t *)master_password, 8, 4);
  86   1          
  87   1          EEPROM_Read((uint8_t *)user_password, 0, 4);
  88   1          delay_ms(20);
  89   1          EEPROM_Read((uint8_t *)master_password, 8, 4);
  90   1          
  91   1              Timer0_Init();
  92   1          Uart1_Init();
  93   1              EA = 1;
  94   1          
  95   1          //sprintf(str, "hello\n");
  96   1          //UART_SendString("hello");
  97   1              
  98   1              while(1)
  99   1              {
 100   2                      TaskRun();
 101   2              }
 102   1      }
 103          
 104          void oledshow_MainPage(void)
 105          {
 106   1          sprintf(str, "user-ID");
 107   1          OLED_ShowString(0,0,str,8);
 108   1          
 109   1          sprintf(str, "Enter Password:");
 110   1          OLED_ShowString(0,2,str,8);
 111   1          
 112   1          // 清空输入密码
 113   1          password_clear();    
 114   1          sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 115   1          OLED_ShowString(0,4,str,8);
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 3   

 116   1          
 117   1          // 门状态
 118   1          sprintf(str, "door close");
 119   1          OLED_ShowString(0,6,str,8);
 120   1          
 121   1      }
 122          
 123          void oledshow_MasterPage(void)
 124          {
 125   1          sprintf(str, "change: user");
 126   1          OLED_ShowString(0,0,str,8);
 127   1          
 128   1          sprintf(str, "Change Password:");
 129   1          OLED_ShowString(0,2,str,8);
 130   1          
 131   1          // 清空输入密码
 132   1          password_clear();    
 133   1          sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 134   1          OLED_ShowString(0,4,str,8);
 135   1          
 136   1      }
 137          
 138          void door_motor(void)
 139          {
 140   1          count0++;                                                                                   //中断次数，即：多少个0.5ms
 141   1              if(door_flag)                                                                   //锁状态-开时
 142   1              {
 143   2                      locktime++;                                                                             //锁开延时开始计时
 144   2              jiaodu = 3;
 145   2                      if(locktime >= 2000)                                                    //到达1秒时
 146   2                      {
 147   3                              jiaodu = 1;                                                                     //舵机回到中间位置
 148   3                              door_flag = 0;                                                          //锁状态-关闭
 149   3                              locktime = 0;                                                           //清零计时
 150   3                      }
 151   2              }
 152   1                      
 153   1              if(count0 <= jiaodu) P07 = 1;           //高电平占空比由变量jiaodu控制，jiaodu=1时高电平0.5ms,jiaodu=5时高电平2.5m
             -s
 154   1              if(count0 > jiaodu && count0 <= 40) P07 = 0;//低电平占空比，jiaodu=1时低电平19.5ms，jiaodu=5时低电平17.5m
             -s
 155   1              if(count0 > 40) count0 = 0;                     //脉宽20ms
 156   1      }
 157          
 158          void password_clear(void)
 159          {
 160   1          password[0] = '_';
 161   1          password[1] = '_';
 162   1          password[2] = '_';
 163   1          password[3] = '_';
 164   1      }
 165          
 166          bit str_judge(char *str1, char *str2)
 167          {
*** WARNING C235 IN LINE 167 OF main.c: parameter 1: different types
*** WARNING C235 IN LINE 167 OF main.c: parameter 2: different types
 168   1          uint8_t i;
 169   1          
 170   1          for(i = 0; i < 4; i++)
 171   1          {
 172   2              if(str1[i] != str2[i])
 173   2                  return 0;
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 4   

 174   2          }
 175   1          return 1;
 176   1      }
 177          
 178          void str_copy(char *str1, char *str2)
 179          {
*** WARNING C235 IN LINE 179 OF main.c: parameter 1: different types
*** WARNING C235 IN LINE 179 OF main.c: parameter 2: different types
 180   1          uint8_t i;
 181   1          
 182   1          for(i = 0; i < 4; i++)
 183   1          {
 184   2              str1[i] = str2[i];
 185   2          }
 186   1      }
 187          
 188          /*-----------------------------------------中断服务函数--------------------------------------------------*
             -/
 189          void Timer0_Rountine(void)      interrupt 1
 190          {
 191   1              uint8_t i;
 192   1          
 193   1          // 手动重装
 194   1          TL0 = 0x33;                         //设置定时初始值
 195   1              TH0 = 0xFE;                             //设置定时初始值
 196   1          
 197   1              //任务定时器递减
 198   1              for(i = 0; i < TASKNUM_MAX; i++)
 199   1                      if(TaskTimer[i])
 200   1                              TaskTimer[i]--;
 201   1              
 202   1          door_motor();        
 203   1      }
 204          
 205          void Uart1_Isr(void) interrupt 4
 206          {
 207   1              if (RI)                         //检测串口1接收中断
 208   1              {
 209   2              
 210   2                      RI = 0;                 //清除串口1接收中断请求位
 211   2              }
 212   1          
 213   1      //    if (TI)                           //检测串口1发送中断
 214   1      //    {
 215   1      //        
 216   1      //        TI = 0;
 217   1      //    }
 218   1      }
 219          
 220          /*-----------------------------------------具体任务--------------------------------------------------*/
 221          void Led_Task(void)
 222          {
 223   1          //EA = 0;
 224   1          
 225   1          //door_motor();
 226   1          
 227   1          //EA = 1;
 228   1      }       
 229          
 230          void key_Task(void)
 231          {
 232   1              // 三行代码数字滤波
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 5   

 233   1              Key_Value = Key_Read();
 234   1              Key_Down = Key_Value&(Key_Value^Key_Old);
 235   1              Key_Old = Key_Value;
 236   1              
 237   1          // 切换用户/管理员模式
 238   1          if(Key_Down == 13)
 239   1          {
 240   2              Mode ^= 1;
 241   2          }
 242   1          
 243   1          // 选择修改用户/管理员密码
 244   1          if(Key_Down == 14)
 245   1          {
 246   2              change_flag ^= 1;
 247   2          }
 248   1              
 249   1          // 输入密码
 250   1              switch(Key_Down)
 251   1              {
 252   2                      case 10:
 253   2                  password[index++] = '0';
 254   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 255   2                  OLED_ShowString(0,4,str,8);
 256   2              break;
 257   2              
 258   2              case 1:
 259   2                  password[index++] = '1';
 260   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 261   2                  OLED_ShowString(0,4,str,8);
 262   2              break;
 263   2              
 264   2              case 2:
 265   2                  password[index++] = '2';
 266   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 267   2                  OLED_ShowString(0,4,str,8);
 268   2              break;
 269   2              
 270   2              case 3:
 271   2                  password[index++] = '3';
 272   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 273   2                  OLED_ShowString(0,4,str,8);
 274   2                      break;
 275   2              
 276   2              case 4:
 277   2                  password[index++] = '4';
 278   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 279   2                  OLED_ShowString(0,4,str,8);
 280   2                      break;
 281   2              
 282   2              case 5:
 283   2                  password[index++] = '5';
 284   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 285   2                  OLED_ShowString(0,4,str,8);
 286   2                      break;
 287   2              
 288   2              case 6:
 289   2                  password[index++] = '6';
 290   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 291   2                  OLED_ShowString(0,4,str,8);
 292   2                      break;
 293   2              
 294   2              case 7:
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 6   

 295   2                  password[index++] = '7';
 296   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 297   2                  OLED_ShowString(0,4,str,8);
 298   2                      break;
 299   2              
 300   2              case 8:
 301   2                  password[index++] = '8';
 302   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 303   2                  OLED_ShowString(0,4,str,8);
 304   2                      break;
 305   2              
 306   2              case 9:
 307   2                  password[index++] = '9';
 308   2                  sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 309   2                  OLED_ShowString(0,4,str,8);
 310   2                      break;
 311   2              
 312   2              default:
 313   2              break;
 314   2              }
 315   1          
 316   1          // 输入完毕，判断密码是否正确
 317   1          if(index > 3)
 318   1          {
 319   2              // 主界面
 320   2              if(page_flag == 0)
 321   2              {
 322   3                  // 用户模式下
 323   3                  if(Mode == 0)
 324   3                  {
 325   4                      door_flag = str_judge(password, user_password);
 326   4                      // 清空输入密码
 327   4                      password_clear();
 328   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 329   4                      OLED_ShowString(0,4,str,8);
 330   4                      
 331   4                  }
 332   3                  // 管理员模式下
 333   3                  else
 334   3                  {
 335   4                      master_enter_flag = str_judge(password, master_password);
 336   4                      // 清空输入密码
 337   4                      password_clear();
 338   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 339   4                      OLED_ShowString(0,4,str,8);
 340   4                      
 341   4                  }
 342   3              }
 343   2              // 管理员界面
 344   2              else
 345   2              {
 346   3                  // 更改用户密码
 347   3                  if(change_flag == 0)
 348   3                  {
 349   4                      str_copy(user_password, password);
 350   4                      
 351   4                      EEPROM_Write((uint8_t *)user_password, 0, 4);
 352   4                      
 353   4                      // 清空输入密码
 354   4                      password_clear();
 355   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 356   4                      OLED_ShowString(0,4,str,8);
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 7   

 357   4                  }
 358   3                  // 更改管理员密码
 359   3                  else
 360   3                  {
 361   4                      str_copy(master_password, password);
 362   4                      
 363   4                      EEPROM_Write((uint8_t *)master_password, 8, 4);
 364   4                      
 365   4                      // 清空输入密码
 366   4                      password_clear();
 367   4                      sprintf(str, "     %c  %c  %c  %c", password[0], password[1], password[2], password[3]);
 368   4                      OLED_ShowString(0,4,str,8);
 369   4                  }
 370   3                  main_enter_flag = 1;
 371   3              }
 372   2              
 373   2              
 374   2              
 375   2              index = 0;
 376   2          }
 377   1             
 378   1      }
 379          
 380          void Oled_Task(void)
 381          {  
 382   1          // 主界面
 383   1          if(page_flag == 0)
 384   1          {   
 385   2              // 是否开门
 386   2              if(door_flag)
 387   2              {
 388   3                  sprintf(str, "door open ");
 389   3                  OLED_ShowString(0,6,str,8);
 390   3                  
 391   3                  P06 = 0;
 392   3      //            door_flag = 0;            
 393   3              }
 394   2              else
 395   2              {
 396   3                  sprintf(str, "door close");
 397   3                  OLED_ShowString(0,6,str,8);
 398   3                  
 399   3                  P06 = 1;
 400   3              }
 401   2              
 402   2              // 用户模式
 403   2              if(Mode == 0)
 404   2              {
 405   3                  sprintf(str, "user-ID  ");
 406   3                  OLED_ShowString(0,0,str,8);
 407   3              }
 408   2              // 管理员模式
 409   2              else
 410   2              {
 411   3                  sprintf(str, "master-ID");
 412   3                  OLED_ShowString(0,0,str,8);
 413   3                  
 414   3                  // 成功进入管理员界面
 415   3                  if(master_enter_flag)
 416   3                  {
 417   4                      OLED_Clear();
 418   4                      oledshow_MasterPage();
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 8   

 419   4                      
 420   4                      door_flag = 0;
 421   4                      Mode = 0;
 422   4                      master_enter_flag = 0;
 423   4                      change_flag = 0;
 424   4                      page_flag = 1;
 425   4                      main_enter_flag = 0;
 426   4                  }
 427   3              }
 428   2          }
 429   1          // 管理员界面
 430   1          else
 431   1          {
 432   2              // 更改用户密码
 433   2              if(change_flag == 0)
 434   2              {
 435   3                  sprintf(str, "change: user  ");
 436   3                  OLED_ShowString(0,0,str,8);
 437   3              }
 438   2              // 更改管理员密码
 439   2              else
 440   2              {
 441   3                  sprintf(str, "change: master");
 442   3                  OLED_ShowString(0,0,str,8);
 443   3              }
 444   2              
 445   2              // 成功返回主界面
 446   2              if(main_enter_flag)
 447   2              {
 448   3                  OLED_Clear();
 449   3                  oledshow_MainPage();
 450   3                  
 451   3                  // 退回主界面用户模式
 452   3                  door_flag = 0;
 453   3                  Mode = 0;
 454   3                  master_enter_flag = 0;
 455   3                  change_flag = 0;
 456   3                  page_flag = 0;
 457   3                  main_enter_flag = 0;
 458   3              }
 459   2          }
 460   1          
 461   1          // 调试代码
 462   1          sprintf(str, "count=%d,%c%c%c%c-%c%c%c%c", count++, user_password[0], user_password[1], user_password[
             -2], user_password[3],
 463   1                                            master_password[0], master_password[1], master_password[2], master_p
             -assword[3]);
 464   1          OLED_ShowString(0,7,str,8);
 465   1          
 466   1      }
 467          
 468          /*-----------------------------------------任务调度--------------------------------------------------*/
 469          void Task_Init(void)
 470          {
 471   1              uint8_t NTask;
 472   1              for(NTask = 0; NTask < sizeof(Task)/sizeof(Task[0]); NTask++)
 473   1              {
 474   2                      TaskTimer[NTask] = Task[NTask].TaskPeriod;
 475   2              }
 476   1      }
 477          
 478          void TaskRun(void)
C51 COMPILER V9.54   MAIN                                                                  01/07/2025 21:20:44 PAGE 9   

 479          {
 480   1              uint8_t NTask;
 481   1              for(NTask = 0; NTask < sizeof(Task)/sizeof(Task[0]); NTask++)
 482   1              {
 483   2                      if(TaskTimer[NTask] == 0)
 484   2                      {
 485   3                              TaskTimer[NTask] = Task[NTask].TaskPeriod;
 486   3                              (Task[NTask].pTask)();
 487   3                      }
 488   2              }
 489   1      }
 490          
 491          
 492          
 493          
 494          
 495          
 496          
 497          
 498          
 499          
 500          
 501          
 502          
 503          
 504          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1771    ----
   CONSTANT SIZE    =   1197    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     43      13
   DATA SIZE        =     18    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)
